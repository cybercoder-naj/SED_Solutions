Answer 1)

a) i) Factory methods.
  ii) Singleton pattern.


b)
// bookings/Flight.java
// import [..]

public abstract class Flight {
    private final FlightNumber flightNumber;
    private final LocalDate date;
    private final Airport origin;
    private final Airport destination;
    private final ServiceLevel serviceLevel;
    private final int pencePerMile;
    private final int standardFeePence;

    protected Flight(
            FlightNumber flightNumber,
            LocalDate date,
            Airport origin,
            Airport destination,
            ServiceLevel serviceLevel, int pencePerMile, int standardFeePence) {
        this.flightNumber = flightNumber;
        this.date = date;
        this.origin = origin;
        this.destination = destination;
        this.serviceLevel = serviceLevel;
        this.pencePerMile = pencePerMile;
        this.standardFeePence = standardFeePence;
    }

    protected abstract List<Seat> eligibleSeats(List<Seat> availableSeats, FrequentFlyerStatus status);

    public final List<Seat> seatingOptions(FrequentFlyerStatus status) {
        if (date.isBefore(LocalDate.now())) {
            throw new BookingException("Flight is in the past");
        }
        List<Seat> availableSeats = SeatManager.getInstance().getAvailableSeats(flightNumber, date);
        return eligibleSeats(availableSeats, status);
    }

    public final int calculateFare() {
        return origin.distanceTo(destination) * pencePerMile + standardFeePence;
    }

    @Override
    public String toString() {
        return "Flight "
                + flightNumber
                + " ("
                + date
                + ") from "
                + origin
                + " to "
                + destination
                + " ("
                + serviceLevel
                + ")";
    }
}

//booking/BusinessClassFlight.java
// import [...]

public class BusinessClassFlight extends Flight {

    // [...]

    public BusinessClassFlight(
            FlightNumber flightNumber, LocalDate date, Airport origin, Airport destination) {
        super(flightNumber, date, origin, destination, ServiceLevel.BUSINESS, PENCE_PER_MILE, STANDARD_FEE_PENCE);
    }

    @Override
    protected List<Seat> eligibleSeats(List<Seat> availableSeats, FrequentFlyerStatus status) {
        if (status == FrequentFlyerStatus.ELITE) {
            // Elite status customers can choose any seat, even in first class.
            return availableSeats;
        }
        return availableSeats.stream().filter(s -> s.cabin() == ServiceLevel.BUSINESS).toList();
    }
}

// bookings/EconomyFlight.java
// import [...]

public class EconomyFlight extends Flight {

  // [..]

  public EconomyFlight(
      FlightNumber flightNumber, LocalDate date, Airport origin, Airport destination) {
    super(flightNumber, date, origin, destination, ServiceLevel.ECONOMY, PENCE_PER_MILE, STANDARD_FEE_PENCE);
  }

  @Override
  protected List<Seat> eligibleSeats(List<Seat> availableSeats, FrequentFlyerStatus status) {
    List<Seat> allAvailableEconomySeats =
        availableSeats.stream().filter(s -> s.cabin() == ServiceLevel.ECONOMY).toList();
    return switch (status) {
      case BASIC -> pickOneAtRandomFrom(allAvailableEconomySeats);
      case SILVER, ELITE -> allAvailableEconomySeats;
    };
  }

  // [..]
}

c)
// bookings/FlightInfo.java
public interface FlightInfo {
  List<Seat> getAvailableSeats(FlightNumber flightNumber, LocalDate date);
}

// bookings/FlightInfoImpl.java
public class FlightInfoImpl implements FlightInfo {
  @Override
  public List<Seat> getAvailableSeats(FlightNumber flightNumber, LocalDate date) {
    return SeatManager.getInstance().getAvailableSeats(flightNumber, date);
  }
}

// bookings/Flight.java
public abstract class Flight {
    private final FlightInfo flightInfo;
    protected Flight(
        /* ... */
        FlightInfo flightInfo) {
      this.flightNumber = flightNumber;
      /* ... */
      this.flightInfo = flightInfo;
    }
    public final List<Seat> seatingOptions(FrequentFlyerStatus status) {
        /* ... */
        List<Seat> availableSeats = flightInfo.getAvailableSeats(flightNumber, date);
        return eligibleSeats(availableSeats, status);
      }
}

// bookings/Example.java
EconomyFlight flight =
    new EconomyFlight(
        FlightNumber.of("BA175"),
        LocalDate.of(2024, 6, 30),
        Airport.LHR,
        Airport.JFK,
        new FlightInfoImpl());


d)
// bookings/BusinessClassFlightTest.java [test]
// import [...]

public class BusinessClassFlightTest {

  @Rule
  public JUnitRuleMockery context = new JUnitRuleMockery();

  private final FlightInfo flightInfo = context.mock(FlightInfo.class);
  private final List<Seat> seats = List.of(
          // new Seat(/* ... */),
          /* ... */
  );
  private final LocalDate future = LocalDate.now().plusDays(5);
  private final FlightNumber flightNumber = FlightNumber.of("EK009");
  private final BusinessClassFlight validFlight = new BusinessClassFlight(flightNumber, future, Airport.LHR, Airport.JFK, flightInfo);

  @Test(expected = BookingException.class)
  public void bookingFlightBeforeDateErrors() {
    LocalDate past = LocalDate.now().minusDays(5);
    BusinessClassFlight flight = new BusinessClassFlight(FlightNumber.of("EK009"), past, Airport.LHR, Airport.JFK, flightInfo);

    flight.seatingOptions(FrequentFlyerStatus.BASIC);
  }

  @Test
  public void bookingFlightAsEliteGivesAllSeats() {
    context.checking(new Expectations(){{
      oneOf(flightInfo).getAvailableSeats(flightNumber, future);
      will(returnValue(seats));
    }});

    List<Seat> options = validFlight.seatingOptions(FrequentFlyerStatus.ELITE);
    Assert.assertArrayEquals(options.toArray(), seats.toArray());
  }

  @Test
  public void bookingFlightAsBasicGivesSomeSeats() {
    context.checking(new Expectations(){{
      oneOf(flightInfo).getAvailableSeats(flightNumber, future);
      will(returnValue(seats));
    }});

    List<Seat> options = validFlight.seatingOptions(FrequentFlyerStatus.SILVER);
    List<Seat> onlyBusiness = seats.stream().filter(s -> s.cabin() == ServiceLevel.BUSINESS).toList();

    Assert.assertArrayEquals(options.toArray(), onlyBusiness.toArray());
  }
}

Answer 2:-

a)
public class ArticleRepositoryTest {

  private static final Article ARTICLE = new Article("How to TDD?");

  @Rule public JUnitRuleMockery context = new JUnitRuleMockery();
  private final Summariser summariser = context.mock(Summariser.class, "Summariser");

  private final ArticleRepository articleRepository = new ArticleRepository(summariser);

  @Test
  public void summarisesArticleOnPublish() {
    context.checking(new Expectations(){{
      oneOf(summariser).summarise(ARTICLE);
      will(returnValue(new Topic[]{Topic.TESTING, Topic.JAVA}));
    }});

    articleRepository.publish(ARTICLE);
  }
}

public class ArticleRepository {
    private final Summariser summariser;

    public ArticleRepository(Summariser summariser) {
        this.summariser = summariser;
    }

    public void publish(Article article) {
        Topic[] keywords = summariser.summarise(article);
    }
}

b)
public class ArticleRepositoryTest {

  private final Subscriber alice = context.mock(Subscriber.class, "alice");
  private final Subscriber bob = context.mock(Subscriber.class, "bob");

  @Test
  public void interestedSubscribersAreNotified() {
    articleRepository.subscribeToTopic(alice, Topic.JAVA);
    articleRepository.subscribeToTopic(bob, Topic.TESTING);

    context.checking(new Expectations(){{
      oneOf(summariser).summarise(ARTICLE);
      will(returnValue(new Topic[]{Topic.TESTING, Topic.JAVA}));

      oneOf(alice).alert(ARTICLE);
      oneOf(bob).alert(ARTICLE);
    }});

    articleRepository.publish(ARTICLE);
  }
}

public class ArticleRepository {
    private final Map<Topic, List<Subscriber>> subscribers;

    public ArticleRepository(Summariser summariser) {
        this.subscribers = new HashMap<>();
    }

    public void publish(Article article) {
        for (Topic topic : keywords) {
            List<Subscriber> interestedSubscribers = subscribers.getOrDefault(topic, new ArrayList<>());
            for (Subscriber subscriber : interestedSubscribers) {
                subscriber.alert(article);
            }
        }
    }

    public void subscribeToTopic(Subscriber subscriber, Topic topic) {
        if (!subscribers.containsKey(topic))
            subscribers.put(topic, new ArrayList<>());

        List<Subscriber> current = subscribers.get(topic);
        current.add(subscriber);
    }
}

c)
 @Test
  public void uninterestedSubscribersAreNotNotified() {
    articleRepository.subscribeToTopic(alice, Topic.JAVA);
    articleRepository.subscribeToTopic(bob, Topic.TESTING);

    context.checking(new Expectations(){{
      oneOf(summariser).summarise(ARTICLE);
      will(returnValue(new Topic[]{Topic.JAVA}));

      oneOf(alice).alert(ARTICLE);
      never(bob).alert(ARTICLE);
    }});

    articleRepository.publish(ARTICLE);
  }

Implementation does not change here.

d)
@Test
public void interestedSubscribersAreNotifiedOnceOnly() {
    articleRepository.subscribeToTopic(alice, Topic.JAVA);
    articleRepository.subscribeToTopic(alice, Topic.TESTING);

    context.checking(new Expectations(){{
      oneOf(summariser).summarise(ARTICLE);
      will(returnValue(new Topic[]{Topic.TESTING, Topic.JAVA}));

      oneOf(alice).alert(ARTICLE);
      never(bob).alert(ARTICLE);
    }});

    articleRepository.publish(ARTICLE);
}

Set<Subscriber> alerted = new HashSet<>();
for (Topic topic : keywords) {
  List<Subscriber> interestedSubscribers = subscribers.getOrDefault(topic, new ArrayList<>());
  for (Subscriber subscriber : interestedSubscribers) {
      if (!alerted.contains(subscriber))
          subscriber.alert(article);
      alerted.add(subscriber);
  }
}

e)
@Test
public void unsubscribedSubscribersAreNotNotified() {
  interestedSubscribersAreNotified();

  articleRepository.unsubscribeToTopic(alice, Topic.JAVA);
  context.checking(new Expectations(){{
    oneOf(summariser).summarise(ARTICLE);
    will(returnValue(new Topic[]{Topic.TESTING, Topic.JAVA}));

    never(alice).alert(ARTICLE);
    oneOf(bob).alert(ARTICLE);
  }});

  articleRepository.publish(ARTICLE);
}

public void unsubscribeToTopic(Subscriber subscriber, Topic topic) {
    if (!subscribers.containsKey(topic)) {
        throw new RuntimeException("Topic was never subscribed");
    }

    List<Subscriber> current = subscribers.get(topic);
    if (!current.contains(subscriber)) {
        throw new RuntimeException(subscriber + " was never subscribed to " + topic);
    }

    current.remove(subscriber);
}